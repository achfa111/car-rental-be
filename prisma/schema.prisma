generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model cars {
  id             Int       @id @default(autoincrement())
  manufactur     String?   @db.VarChar
  type           String?   @db.VarChar
  license_number String?   @db.VarChar(30)
  seat           Int?
  baggage        Int?
  transmission   String?   @db.VarChar
  year           String?   @db.VarChar
  name           String?   @db.VarChar
  description    String?
  is_driver      Boolean?
  is_available   Boolean?  @default(true)
  img            String?
  price          Int?
  created_dt     DateTime? @default(now()) @db.Timestamp(6)
  updated_dt     DateTime? @updatedAt
  created_by     String?   @db.VarChar
  updated_by     String?   @db.VarChar
  orders         orders[]

  // @@index([name], map : "car_name_index" )
}

model orders {
  id         Int       @id @default(autoincrement())
  order_no   String    @unique @db.VarChar
  user_id    Int
  car_id     Int
  start_time DateTime? @db.Timestamp(6)
  end_time   DateTime? @db.Timestamp(6)
  total      Float?
  is_driver  Boolean?
  is_expired Boolean?
  status     String?   @db.VarChar
  created_dt DateTime? @default(now()) @db.Timestamp(6)
  updated_dt DateTime? @updatedAt
  created_by String?   @db.VarChar
  updated_by String?   @db.VarChar
  cars       cars?     @relation(fields: [car_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_carId_fkey")
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_userId_fkey")
}

model test {
  id Int @id
}

model users {
  id             Int       @id @default(autoincrement())
  fullname       String?   @db.VarChar
  email          String    @unique @db.VarChar(30)
  password       String    @db.VarChar
  address        String?   @db.VarChar
  gender         String?   @db.VarChar
  avatar         String?   @db.VarChar
  phone_number   String?   @unique(map: "users_phoneNumber_key") @db.VarChar
  driver_license String?
  birthdate      String?   @db.VarChar
  role_id        Int
  created_dt     DateTime? @default(now()) @db.Timestamp(6)
  updated_dt     DateTime? @updatedAt
  created_by     String?   @db.VarChar
  updated_by     String?   @db.VarChar
  orders         orders[]
  role           roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model roles {
  id         Int       @id @default(autoincrement())
  role       String    @unique
  created_dt DateTime? @default(now()) @db.Timestamp(6)
  updated_dt DateTime? @updatedAt
  created_by String?   @db.VarChar
  updated_by String?   @db.VarChar
  access     access[]
  user       users[]
}

model menus {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  title       String
  icon        String?
  path        String?
  is_submenu  Boolean   @default(false)
  parent_id   Int?
  permissions String[]
  created_dt  DateTime? @default(now()) @db.Timestamp(6)
  updated_dt  DateTime? @updatedAt
  created_by  String?   @db.VarChar
  updated_by  String?   @db.VarChar
  submenu     menus?    @relation("submenu", fields: [parent_id], references: [id])
  parent      menus[]   @relation("submenu")
  access      access[]
}

model access {
  id          Int       @id @default(autoincrement())
  role_id     Int
  menu_id     Int
  visible     Boolean   @default(true)
  grant       Json
  created_dt  DateTime? @default(now()) @db.Timestamp(6)
  updated_dt  DateTime? @updatedAt
  created_by  String?   @db.VarChar
  updated_by  String?   @db.VarChar
  roles       roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  menus       menus     @relation(fields: [menu_id], references: [id], onDelete: Cascade)
}